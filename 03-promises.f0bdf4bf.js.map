{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAKMC,EAAOC,SAASC,cAAc,QAGpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACWC,KAAKC,SAAW,GAEpCJ,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEjBA,E,IAiCP,SAASO,EAAQC,G,IAAET,EAAFS,EAAET,SAAUC,EAAZQ,EAAYR,MAC3BS,EAAAhB,GAASiB,OAAOC,QAAQ,sBAAuCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,CAGvE,SAASa,EAAUL,G,IAAET,EAAFS,EAAET,SAAUC,EAAZQ,EAAYR,MAC7BS,EAAAhB,GAASiB,OAAOI,QAAQ,uBAAsCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,CAGtEL,EAAKoB,iBAAiB,UArCtB,SAA0BC,GACxBA,EAAEC,iBAgBF,IAPA,IAAIjB,EAAQkB,OAAOF,EAAEG,OAAOC,SAASpB,MAAMqB,OACrCC,EAAOJ,OAAOF,EAAEG,OAAOC,SAASE,KAAKD,OACrCE,EAASL,OAAOF,EAAEG,OAAOC,SAASG,OAAOF,OAKtCG,EAAI,EAAGA,GAAKD,EAAQC,IACvBxB,IAAUkB,OAAOF,EAAEG,OAAOC,SAASpB,MAAMqB,OAC3CvB,EAAc0B,EAAGxB,GAAOyB,KAAKZ,GAAWa,MAAMnB,GAI9CT,EAAc0B,EADdxB,GAASsB,GACeG,KAAKZ,GAAWa,MAAMnB,GAEhDZ,EAAKgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\n// const delay = document.querySelector('input[name = \"delay\"]')\n// const step = document.querySelector('input[name = \"step\"]')\n// const amount = document.querySelector('input[name = \"amount\"]')\nconst form = document.querySelector('form')\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({position, delay})\n    } else {\n      reject({position, delay})\n    }\n    }, delay)\n  })\n}\n\nfunction onCreatePromises(e) {\n  e.preventDefault()\n  // const formData = new FormData(e.currentTarget)\n  // const dataParams = {}\n  // console.log(formData);\n  // console.log(formData.entries());\n  // for (const [key, value] of formData.entries()) {\n  //   console.log(key);\n  //   console.log(value);\n  //   dataParams[key] = Number(value)\n  let delay = Number(e.target.elements.delay.value)\n  const step = Number(e.target.elements.step.value)\n  const amount = Number(e.target.elements.amount.value)\n  // }\n\n  // let { amount, step, delay } = dataParams;\n\n  for (let i = 1; i <= amount; i++){\n    if (delay === Number(e.target.elements.delay.value)) {\n      createPromise(i, delay).then(onSuccess).catch(onError);\n    \n    } else {\n      delay += step;\n      createPromise(i, delay).then(onSuccess).catch(onError);\n    }\n    form.reset()\n  }\n}\n\nfunction onError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction onSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nform.addEventListener('submit', onCreatePromises);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$ce04d3a99e08e73b$var$onError","param","$parcel$interopDefault","Notify","failure","concat","$ce04d3a99e08e73b$var$onSuccess","success","addEventListener","e","preventDefault","Number","target","elements","value","step","amount","i","then","catch","reset"],"version":3,"file":"03-promises.f0bdf4bf.js.map"}